using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HomeOS.Hub.Platform.Views;
using HomeOS.Hub.Platform.DeviceScout;
using HomeOS.Hub.Common;

// Include reference to the Crestron namespace:
using Crestron.ActiveCNX;

namespace HomeOS.Hub.Scouts.DigitalMedia
{
    class ActiveCNXConnection
    {

        private ActiveCNX acnxConnection;

        VLogger logger;

        internal ActiveCNXConnection(DigitalMediaPanelDescription connectionDescription, VLogger logger)
        {
            this.logger = logger;
            this.acnxConnection = new ActiveCNX();

            // Define event handlers for the various events that are generated by ActiveCNX.NET
            this.acnxConnection.onConnect += new Crestron.ActiveCNX.ActiveCNXConnectionEventHandler(acnxConnection_onConnect);
           this.acnxConnection.onDisconnect +=new Crestron.ActiveCNX.ActiveCNXConnectionEventHandler(acnxConnection_onDisconnect);
           this.acnxConnection.onError += new Crestron.ActiveCNX.ActiveCNXErrorEventHandler(acnxConnection_onError);
               /*	  this.acnxConnection.onAnalog +=new Crestron.ActiveCNX.ActiveCNXEventHandler(acnxConnection_onAnalog);
                this.acnxConnection.onDigital += new Crestron.ActiveCNX.ActiveCNXEventHandler(acnxConnection_onDigital);
                this.acnxConnection.onSerial += new Crestron.ActiveCNX.ActiveCNXEventHandler(acnxConnection_onSerial);
                this.acnxConnection.onCertVerification += new Crestron.ActiveCNX.ActiveCNXCertificateEventHandler(acnxConnection_onCertVerification);
             * */
            if ((connectionDescription.IPAddress != null) && (connectionDescription.IPPort > 0))
			{
              /*  this.acnxConnection.Connect(connectionDescription.IPAddress,
                    connectionDescription.IPID, connectionDescription.UserName, connectionDescription.Password,
                    connectionDescription.IPPort, connectionDescription.UseSSL, 0, 0);*/
			}
        }



        /// <summary>
        /// Event handler that gets triggered when a connection is made with a control system
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		private void acnxConnection_onConnect(object sender, ActiveCNXConnectionEventArgs e)
		{

             logger.Log("Connected\r\n");
       
            /// Send Update Request to the control system. An update request asks for the status of 
            /// ALL attributes defined on the symbol. However, any attribute with a value of 0, or false 
            /// will not be sent. If you have member variables defined that are tied to attribute values, 
            /// make sure those values are zeroed out.
                logger.Log("Begin Update Request\r\n");
            
			this.acnxConnection.UpdateRequest();
            logger.Log("End Update Request\r\n");
           
		}

        /// <summary>
        /// Event Handler for when the connection is broken
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void acnxConnection_onDisconnect(object sender, ActiveCNXConnectionEventArgs e)
        {
            
                logger.Log(string.Format("Disconnect Reason: {0}\r\n", e.DisconnectReasonMessage));
           
        }

        private void acnxConnection_onError(object sender, ActiveCNXErrorEventArgs e)
        {
           logger.Log(string.Format("Error: {0}\n", e.ErrorMessage));
        }

   

    }
}
