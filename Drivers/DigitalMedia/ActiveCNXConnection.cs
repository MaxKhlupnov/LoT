using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HomeOS.Hub.Platform.Views;

using HomeOS.Hub.Common;

// Include reference to the Crestron namespace:
using Crestron.ActiveCNX;

namespace HomeOS.Hub.Drivers.DigitalMedia
{

    public enum DigitalSignalValue { High, Low , HighLow, LowHigh}
    public enum CrestronEvent { onConnect, onDisconnect, onError, onDigital, onAnalog, onSerial}
    internal class ActiveCNXConnection
    {

        internal enum ConnectionStatus{Connected, Disconnected};
        

        private ActiveCNX acnxConnection;

        VLogger logger;

        private int IPID;
        private string IPAddress;
        private int IPPort;
        private string UserName;
        private string Password;
        private bool UseSSL;

       internal ConnectionStatus Status = ConnectionStatus.Disconnected;
       internal Port communicationPort;

        internal ActiveCNXConnection(int IPID, string IPAddress, int IPPort, string UserName, string Password, bool UseSSL, VLogger logger)
        {
            this.logger = logger;
            this.IPID = IPID;
            this.IPAddress = IPAddress;
            this.IPPort = IPPort;
            this.UserName = UserName;
            this.Password = Password;
            this.UseSSL = UseSSL;

            this.acnxConnection = new ActiveCNX();
            
           
            // Define event handlers for the various events that are generated by ActiveCNX.NET
           this.acnxConnection.onConnect += new Crestron.ActiveCNX.ActiveCNXConnectionEventHandler(acnxConnection_onConnect);
           this.acnxConnection.onDisconnect +=new Crestron.ActiveCNX.ActiveCNXConnectionEventHandler(acnxConnection_onDisconnect);
           this.acnxConnection.onError += new Crestron.ActiveCNX.ActiveCNXErrorEventHandler(acnxConnection_onError);
           this.acnxConnection.onDigital += new Crestron.ActiveCNX.ActiveCNXEventHandler(acnxConnection_onDigital);

               /*	  this.acnxConnection.onAnalog +=new Crestron.ActiveCNX.ActiveCNXEventHandler(acnxConnection_onAnalog);
           
                this.acnxConnection.onSerial += new Crestron.ActiveCNX.ActiveCNXEventHandler(acnxConnection_onSerial);
                this.acnxConnection.onCertVerification += new Crestron.ActiveCNX.ActiveCNXCertificateEventHandler(acnxConnection_onCertVerification);
             * */
           
        }

        internal void Connect(Port communicationPort)
        {
            this.communicationPort = communicationPort;
               this.acnxConnection.Connect(this.IPAddress,
                   this.IPID, this.UserName, this.Password, this.IPPort, this.UseSSL, 0, 0);		
        }


        internal void Disconnect()
        {
            this.acnxConnection.Disconnect();
        }


        internal bool SendDigital(int Slot, int Join,  DigitalSignalValue  value)
        {

            switch(value)
            {
                case DigitalSignalValue.High:
                        return this.acnxConnection.SendDigital(Slot, Join, true);                       
                case DigitalSignalValue.Low:
                        return this.acnxConnection.SendDigital(Slot, Join, false);                        
                case DigitalSignalValue.HighLow:
                        this.acnxConnection.SendDigital(Slot, Join, true);
                        return this.acnxConnection.SendDigital(Slot, Join, false);                        
                case DigitalSignalValue.LowHigh:
                        this.acnxConnection.SendDigital(Slot, Join, false);
                        return this.acnxConnection.SendDigital(Slot, Join, true);                        
            }


            logger.Log(string.Format("Illegal Send digital value: {0}\r\n", Enum.GetName(typeof(DigitalSignalValue), value)));
            throw new ArgumentOutOfRangeException("DigitalSignalValue  value");
            
        }

        /// <summary>
        /// Event handler that gets triggered when a connection is made with a control system
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		private void acnxConnection_onConnect(object sender, ActiveCNXConnectionEventArgs e)
		{

             logger.Log("Connected\r\n");
       
            /// Send Update Request to the control system. An update request asks for the status of 
            /// ALL attributes defined on the symbol. However, any attribute with a value of 0, or false 
            /// will not be sent. If you have member variables defined that are tied to attribute values, 
            /// make sure those values are zeroed out.
                logger.Log("Begin Update Request\r\n");
            
			this.acnxConnection.UpdateRequest();
            logger.Log("End Update Request\r\n");

            communicationPort.Notify(RoleSignalDigital.RoleName, RoleSignalDigital.OnConnectEvent, new List<VParamType>() { });
           
		}

        /// <summary>
        /// Event Handler for when the connection is broken
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void acnxConnection_onDisconnect(object sender, ActiveCNXConnectionEventArgs e)
        {
            
                logger.Log(string.Format("Disconnect Reason: {0}\r\n", e.DisconnectReasonMessage));

                communicationPort.Notify(RoleSignalDigital.RoleName, RoleSignalDigital.OnDisconnectEvent, 
                    new List<VParamType>() {new ParamType(e.DisconnectReasonMessage)});
        }

        /// <summary>
        /// Event handler for when a digital join is sent from the control system
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void acnxConnection_onDigital(object sender, ActiveCNXEventArgs e)
        {
            logger.Log(string.Format("Digital join: {0}, Slot: {1}, Value: {2}\r\n", e.Join, e.Slot, e.DigitalValue));
            List<VParamType> retVals = new List<VParamType>() { new ParamType(e.Slot), new ParamType(e.Join),  new ParamType(e.DigitalValue) };
           
            communicationPort.Notify(RoleSignalDigital.RoleName, RoleSignalDigital.OnDigitalEvent, retVals);
            
        }


        private void acnxConnection_onError(object sender, ActiveCNXErrorEventArgs e)
        {
           logger.Log(string.Format("Error: {0}\n", e.ErrorMessage));
           communicationPort.Notify(RoleSignalDigital.RoleName, RoleSignalDigital.OnErrorEvent, new List<VParamType>() { new ParamType(e.ErrorMessage) });
        }

        

    }
}
